{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;AAAA,IAAI,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;;IAEpB,EAAE;AACO,aADT,EAAE,CACQ,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE;8BADlC,EAAE;;AAEA,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,eAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AACxB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC;KACpB;;iBAPC,EAAE;AASJ,kBAAU;mBAAA,sBAAG;;;AACT,uBAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAM;AAC1C,0BAAM,CAAC,MAAM,OAAM,CAAC;iBACvB,CAAC,CAAC;aACN;;AAED,aAAK;mBAAA,iBAAG;AACJ,uBAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACjC;;AAED,WAAG;mBAAA,aAAC,EAAE,EAAE;AACJ,oBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACxB;;AAED,mBAAW;mBAAA,qBAAC,OAAO,EAAE;AACjB,uBAAO,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aACxC;;;;WAzBC,EAAE;;;AA4BR,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;AAC3B,cAAU,EAAA,oBAAC,MAAM,EAAE,QAAQ,EAAE;AACzB,YAAI,CAAC,MAAM,EAAE;AACT,mBAAO;SACV;AACD,YAAI,CAAC,QAAQ,EAAE;AACX,oBAAQ,GAAG,UAAC,IAAI;uBAAK,OAAO,CAAC,iBAAiB,IAAI,IAAI,IAAI,OAAO,CAAA,AAAC,CAAC;aAAA,CAAC;SACvE;AACD,eAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAC,KAAK,EAAK;AAClD,gBAAI,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7B,gBAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACpC,gBAAI,EAAE,GAAG,IAAI,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAClD,qBAAS,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACzB,mBAAO,EAAE,CAAC,UAAU,EAAE,CAAC;SAC1B,CAAC,CAAC,CAAC;KACP;AACD,SAAK,EAAA,iBAAG;AACJ,iBAAS,CAAC,OAAO,CAAC,UAAC,EAAE;mBAAK,EAAE,CAAC,KAAK,EAAE;SAAA,CAAC,CAAC;KACzC;AACD,OAAG,EAAA,aAAC,KAAK,EAAE;AACP,eAAO,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC/B;AACD,WAAO,EAAA,iBAAC,QAAQ,EAAE;AACd,eAAO,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KACtC;CACJ,CAAC,CAAC","file":"src/index.js","sourcesContent":["var databases = new Map();\n\nclass Db {\n    constructor(dbName, Store, options) {\n        this.dbName = dbName;\n        options.dbName = dbName;\n        this.options = options;\n        this.Store = Store;\n        this.models = [];\n    }\n\n    initialize() {\n        return this.Store.initialize(this).then(() => {\n            Object.freeze(this);\n        });\n    }\n\n    close() {\n        return this.Store.close(this);\n    }\n\n    add(vo) {\n        this.models.push(vo);\n    }\n\n    createStore(manager) {\n        return new this.Store(this, manager);\n    }\n}\n\nmodule.exports = Object.freeze({\n    initialize(config, getStore) {\n        if (!config) {\n            return;\n        }\n        if (!getStore) {\n            getStore = (type) => require('springbokjs-db-' + (type || 'mongo'));\n        }\n        return Promise.all(Object.keys(config).map((dbKey) => {\n            var dbConfig = config[dbKey];\n            var Store = getStore(dbConfig.type);\n            var db = new Db(dbConfig.dbName, Store, dbConfig);\n            databases.set(dbKey, db);\n            return db.initialize();\n        }));\n    },\n    close() {\n        databases.forEach((db) => db.close());\n    },\n    get(dbKey) {\n        return databases.get(dbKey);\n    },\n    forEach(callback) {\n        return databases.forEach(callback);\n    }\n});\n"]}